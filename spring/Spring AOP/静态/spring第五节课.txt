AOP（Aspect Oriented Programming） 面向切面编程
核心：代理设计模式
1.静态代理设计模式（static proxy）
	I.service   
	核心：						  核心功能：一定要有的功能，没有的话业务无法完成
	处理业务的逻辑代码         额外功能：核心功能基础上添加的功能（可有可无）
	调用Dao中的方法
	额外：
	控制事务
	II.在service中应不应该有额外功能？
	业务调用者：
		service中必须有额外功能，没有额外功能，业务将面临风险
	代码设计者：
		service中不应该有额外功能，违反java中的各司其职性，额外功能经常需要被修改，不免影响核心功能
	矛盾：静态代理设计模式来解决
	III.生活案例：租房
	租房 ---- 中介Service{	 ----	  房东service{
					租房（）{			  	租房（）{
						//打广告				
						//带客户看房		额外功能由中介来做	
						//找房东			
											    核心：
												   //签合同
												   //收钱
											   }
										    }
	
	IV.静态代理中的概念
		原始类：只负责核心功能的类
		原始方法：原始类中的方法
		代理类：给原始类添加额外功能的类
	V.静态代理的本质：代理类只负责额外功能，原始类只负责核心功能，通过代理类为原始类增加额外功能
	VI.静态代理的缺点
		①类过载：有一个原始类，就需要写一个代理类，造成类过载
		②额外功能代码冗余，不利于项目的维护
	
	
	
	